apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ethereum-data-longhorn
  namespace: chainfetch
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 1500Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ethereum-node
  namespace: chainfetch
  labels:
    app: ethereum-node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ethereum-node
  template:
    metadata:
      labels:
        app: ethereum-node
    spec:
      containers:
        # Geth (Execution Layer)
        - name: ethereum
          image: ethereum/client-go:latest
          imagePullPolicy: Always
          args:
            - "--syncmode=snap"
            - "--http"
            - "--http.addr=0.0.0.0"
            - "--http.api=eth,net,web3"
            - "--http.corsdomain=*"
            - "--http.vhosts=*"
            - "--ws"
            - "--ws.addr=0.0.0.0"
            - "--ws.api=eth,net,web3"
            - "--ws.origins=*"
            - "--authrpc.addr=0.0.0.0"
            - "--authrpc.port=8551"
            - "--authrpc.vhosts=*"
            - "--authrpc.jwtsecret=/root/.ethereum/geth/jwtsecret"
          ports:
            - containerPort: 8545
              name: http-rpc
            - containerPort: 8546
              name: ws-rpc
            - containerPort: 8551
              name: auth-rpc
            - containerPort: 30303
              name: p2p-geth
          volumeMounts:
            - name: ethereum-data
              mountPath: /root/.ethereum
          resources:
            requests:
              cpu: "1000m"
              memory: "4Gi"
              ephemeral-storage: "2Gi"
            limits:
              cpu: "1500m"
              memory: "8Gi"
              ephemeral-storage: "4Gi"
          securityContext:
            capabilities:
              drop:
                - NET_RAW
          readinessProbe:
            httpGet:
              path: /
              port: 8545
            initialDelaySeconds: 30
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /
              port: 8545
            initialDelaySeconds: 120
            periodSeconds: 60
        
        # Lighthouse (Consensus Layer)
        - name: lighthouse
          image: sigp/lighthouse:latest
          imagePullPolicy: Always
          command: ["lighthouse"]
          args:
            - "beacon_node"
            - "--network=mainnet"
            - "--datadir=/root/.ethereum/lighthouse"
            - "--http"
            - "--http-address=0.0.0.0"
            - "--http-port=5052"
            - "--execution-endpoint=http://127.0.0.1:8551"
            - "--execution-jwt=/root/.ethereum/geth/jwtsecret"
            - "--checkpoint-sync-url=https://mainnet.checkpoint.sigp.io"
            - "--genesis-state-url=https://mainnet.checkpoint.sigp.io/eth/v2/debug/beacon/states/finalized"
          ports:
            - containerPort: 5052
              name: beacon-api
            - containerPort: 9000
              name: p2p-beacon
              protocol: TCP
            - containerPort: 9000
              name: p2p-beacon-udp
              protocol: UDP
          volumeMounts:
            - name: ethereum-data
              mountPath: /root/.ethereum
          env:
            - name: RUST_LOG
              value: "info"
          resources:
            requests:
              cpu: "500m"
              memory: "10Gi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "1000m"
              memory: "20Gi"
              ephemeral-storage: "2Gi"
          securityContext:
            capabilities:
              drop:
                - NET_RAW
          # TEMPORARILY DISABLED during Geth snap sync - will re-enable after sync completes
          # readinessProbe:
          #   httpGet:
          #     path: /eth/v1/node/health
          #     port: 5052
          #   initialDelaySeconds: 120
          #   periodSeconds: 60
          #   timeoutSeconds: 30
          #   failureThreshold: 10
          # livenessProbe:
          #   httpGet:
          #     path: /eth/v1/node/health
          #     port: 5052
          #   initialDelaySeconds: 300
          #   periodSeconds: 120
          #   timeoutSeconds: 30
          #   failureThreshold: 5
      volumes:
        - name: ethereum-data
          persistentVolumeClaim:
            claimName: ethereum-data-longhorn
---
apiVersion: v1
kind: Service
metadata:
  name: ethereum-node
  namespace: chainfetch
  labels:
    app: ethereum-node
spec:
  type: ClusterIP
  ports:
    - port: 8545
      targetPort: 8545
      name: http-rpc
    - port: 8546
      targetPort: 8546
      name: ws-rpc
    - port: 5052
      targetPort: 5052
      name: beacon-api
  selector:
    app: ethereum-node
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ethereum-ingress
  namespace: chainfetch
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/auth-url: "http://bearer-auth.chainfetch.svc.cluster.local/auth"
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User,X-Auth-Request-Email
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ethereum.chainfetch.app
      secretName: ethereum-tls
  rules:
    - host: ethereum.chainfetch.app
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ethereum-node
                port:
                  number: 8545
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ethereum-websocket-ingress
  namespace: chainfetch
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # TEMPORARY: No authentication for testing WebSocket
    # nginx.ingress.kubernetes.io/auth-url: "http://bearer-auth.chainfetch.svc.cluster.local/auth"
    # nginx.ingress.kubernetes.io/auth-method: GET
    # WebSocket-specific annotations
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "ethereum-node"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ethereum-ws.chainfetch.app
      secretName: ethereum-ws-tls
  rules:
    - host: ethereum-ws.chainfetch.app
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ethereum-node
                port:
                  number: 8546
