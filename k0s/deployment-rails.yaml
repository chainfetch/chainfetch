# Combined Rails Application Deployment
# Includes: PostgreSQL PVC, Database, Jobs, and Web components
#
# Deployment: kubectl apply -f deployment-rails.yaml
#
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-longhorn
  namespace: chainfetch
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn-qdrant-distributed
  resources:
    requests:
      storage: 150Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: chainfetch
  labels:
    app: postgres
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: pgvector/pgvector:pg17
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chainfetch-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              value: chainfetch_production
            - name: POSTGRES_USER
              value: chainfetch-db-instance
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          securityContext:
            capabilities:
              drop:
                - NET_RAW
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: postgres-data-longhorn
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: chainfetch
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chainfetch-jobs
  namespace: chainfetch
  labels:
    app: chainfetch-jobs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chainfetch-jobs
  template:
    metadata:
      labels:
        app: chainfetch-jobs
    spec:
      imagePullSecrets:
        - name: ghcr-cred
      containers:
        - name: jobs
          image: ghcr.io/dm0lz/chainfetch:latest
          imagePullPolicy: Always
          command: ["./bin/jobs"]
          envFrom:
            - configMapRef:
                name: chainfetch-config
            - secretRef:
                name: chainfetch-secrets
          resources:
            requests:
              cpu: "400m"
              memory: "1Gi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "700m"
              memory: "1536Mi"
              ephemeral-storage: "1Gi"
          securityContext:
            capabilities:
              drop:
                - NET_RAW
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chainfetch-web
  namespace: chainfetch
  labels:
    app: chainfetch-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chainfetch-web
  template:
    metadata:
      labels:
        app: chainfetch-web
    spec:
      imagePullSecrets:
        - name: ghcr-cred
      containers:
        - name: web
          image: ghcr.io/dm0lz/chainfetch:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: chainfetch-config
            - secretRef:
                name: chainfetch-secrets
          readinessProbe:
            httpGet:
              path: /up
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /up
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 30
          resources:
            requests:
              cpu: "600m"
              memory: "1Gi"
              ephemeral-storage: "1.5Gi"
            limits:
              cpu: "700m"
              memory: "1.5Gi"
              ephemeral-storage: "1.5Gi"
          securityContext:
            capabilities:
              drop:
                - NET_RAW
---
apiVersion: v1
kind: Service
metadata:
  name: chainfetch-web
  namespace: chainfetch
  labels:
    app: chainfetch-web
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: chainfetch-web 